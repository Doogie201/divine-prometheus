/**
 * =================================================================================
 * |
 * |   ECHO_MIND ELITE DESIGN SYSTEM (EDS) - tailwind.config.ts
 * |   ---------------------------------------------------------------------------
 * |   DESCRIPTION: This configuration file acts as the single source of truth
 * |   for the entire UI's design language. It translates the visual and
 * |   interactive DNA from `index.css` into a scalable, maintainable, and
 * |   hyper-optimized Tailwind CSS architecture.
 * |
 * =================================================================================
 * @type {import('tailwindcss').Config}
 */
import type { Config } from 'tailwindcss';
import tailwindcssAnimate from 'tailwindcss-animate'

export default {
  // Set dark mode to be toggled via a '.dark' class on the html/body tag.
  darkMode: 'class',

  // Configure files to be scanned by Tailwind for class names.
  content: [
    './index.html',
    './src/**/*.{js,ts,jsx,tsx}',
  ],

  // Safelist dynamic classes that might be generated by props, ensuring
  // they are not purged in production builds.
  safelist: [
    {
      // This pattern matches classes from the original PromptWorkbench component,
      // such as `text-cyan-400`, `border-rose-500/20`, etc.
      pattern: /(bg|text|border)-(rose|amber|cyan)-(\d{2,3})(\/([0-9]{1,2}))?/,
    },
  ],

  theme: {
    extend: {
      // =======================================================================
      //  üé® 1. DESIGN TOKEN AMPLIFICATION (COLOR SYSTEM)
      //     - Maps the HSL variables from `index.css` to semantic color roles.
      //     - Enables utilities like `bg-background`, `text-primary`, etc.
      //     - The `.dark` class will automatically switch these variable values.
      // =======================================================================
      colors: {
        // Semantic Color Roles
        background: 'hsl(var(--color-background) / <alpha-value>)',
        surface: 'hsl(var(--color-surface) / <alpha-value>)',
        primary: 'hsl(var(--color-primary) / <alpha-value>)',
        secondary: 'hsl(var(--color-secondary) / <alpha-value>)',
        accent: 'hsl(var(--color-accent) / <alpha-value>)',
        
        // Status & Feedback Roles
        success: 'hsl(var(--color-success) / <alpha-value>)',
        danger: 'hsl(var(--color-danger) / <alpha-value>)',
        warning: 'hsl(var(--color-warning) / <alpha-value>)',

        // Text & Content Roles
        'text-primary': 'hsl(var(--color-text-primary) / <alpha-value>)',
        'text-secondary': 'hsl(var(--color-text-secondary) / <alpha-value>)',
        'text-muted': 'hsl(var(--color-text-muted) / <alpha-value>)',

        // Border Roles
        border: 'hsl(var(--color-border) / <alpha-value>)',
        'border-interactive': 'hsl(var(--color-border-interactive) / <alpha-value>)',
      },

      // =======================================================================
      //  üñãÔ∏è 2. TYPE SYSTEM REFINEMENT
      //     - Establishes the core font families for the application.
      // =======================================================================
      fontFamily: {
        sans: ['var(--font-sans)', 'system-ui', 'sans-serif'],
        mono: ['var(--font-mono)', 'ui-monospace', 'monospace'],
      },

      // =======================================================================
      //  üìè 3. SPACING & LAYOUT HARMONY
      //     - Defines the border radius tokens from `index.css`.
      // =======================================================================
      borderRadius: {
        sm: 'var(--radius-sm)',
        md: 'var(--radius-md)',
        lg: 'var(--radius-lg)',
      },

      // =======================================================================
      //  ‚ú® 4. MOTION & ANIMATION UTILITIES
      //     - Defines all keyframes and animation utilities for a rich,
      //       interactive, and dopamine-triggering user experience.
      // =======================================================================
      keyframes: {
        // Entrance & Exit Animations
        'fade-in': {
          from: { opacity: '0', transform: 'translateY(10px)' },
          to: { opacity: '1', transform: 'translateY(0)' },
        },
        'slide-up': {
          from: { opacity: '0', transform: 'translateY(20px)' },
          to: { opacity: '1', transform: 'translateY(0)' },
        },
        // State & Feedback Animations
        'pulse-glow': {
          '0%, 100%': { boxShadow: '0 0 15px -3px hsl(var(--color-accent) / 0)' },
          '50%': { boxShadow: '0 0 15px -3px hsl(var(--color-accent) / 0.5)' },
        },
        'pulse-slow': {
          '0%, 100%': { transform: 'scale(1)', opacity: '0.1' },
          '50%': { transform: 'scale(1.1)', opacity: '0.15' },
        },
        'bounce-sm': {
          '0%, 100%': { transform: 'translateY(0)', animationTimingFunction: 'cubic-bezier(0.8, 0, 1, 1)' },
          '50%': { transform: 'translateY(-15%)', animationTimingFunction: 'cubic-bezier(0, 0, 0.2, 1)' },
        },
      },
      animation: {
        // Animation Utility Classes
        'fade-in': 'fade-in 0.5s ease-out forwards',
        'slide-up': 'slide-up 0.6s cubic-bezier(0.25, 1, 0.5, 1) forwards',
        'pulse-glow': 'pulse-glow 2.5s infinite',
        'pulse-slow': 'pulse-slow 8s infinite ease-in-out',
        'bounce-sm': 'bounce-sm 1s infinite',
      },
      transitionTimingFunction: {
        'fast': 'var(--transition-fast)',
        'medium': 'var(--transition-medium)',
      }
    },
  },

  // ===========================================================================
  //  üîå 5. PLUGINS & ECOSYSTEM INTEGRATION
  //     - Adds official Tailwind plugins for enhanced functionality.
  //       - @tailwindcss/forms: Provides a basic reset for form styles.
  // ===========================================================================
  plugins: [
    require('@tailwindcss/forms'),
  ],

} satisfies Config;
